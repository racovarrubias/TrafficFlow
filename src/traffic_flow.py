#!/usr/bin/env python3

import googlemaps
import os
import pandas as pd
import json
import csv, sys
import os.path
import string
import re
import numpy as np
import folium
from folium import plugins
from folium.plugins import HeatMap
from folium import IFrame
from datetime import datetime, timedelta

import matplotlib.pyplot as plt

#Add a colormap key
import branca.colormap as cm

#To save image in png use selenium
#save image into pngi
import os
import time
from selenium import webdriver


#googleMapsClient = googlemaps.Client(key=os.environ["GOOGLE_API_KEY"])
#googleMapsClient = googlemaps.Client('AIzaSyCM-Nya2nPxvnggbr6uhTSWOss2T11Iud4')
googleMapsClient = googlemaps.Client('AIzaSyDMSBokcnBnCPRE2R1NcNU-STLts7FdvEU')

#for chunk in pd.read_csv(filename, chunksize=chunksize):
#    process(chunk)
    



def group_day_of_week(dataframe, month):

	"""
	Group data by day of the week
	
	dataframe: input month dataframe
	"""
	
	#select data based on the weekday
	dataframe['Date'] = pd.to_datetime(dataframe['Date'])
	dataframe['DayWeek'] = dataframe['Date'].dt.weekday_name
	dataframe = dataframe.groupby(['DayWeek'])
	
	weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
	for day in weekdays:
	    print('selecting {} Weekday'.format(day))
	    #print(dataframe.get_group(day)
	    return hour_data(dataframe.get_group(day), month, day)
		#return hourly_data

def range_hours_in_day():
	"""
	Creates a figure for every hour of data 
	
	weekday_data: weekday dataframe selected from group_day_of_week
	weekday: weekday of the week (Monday, Tuesday, ...)
	"""
	
	# Set Date as the index and delete Date column
	#weekday_data.index = weekday_data['Date']
	
	#hours
	hours_day = ['1:00','2:00','3:00','4:00','5:00','6:00','7:00','8:00','9:00','10:00','11:00','12:00',
				'13:00','14:00','15:00','16:00','17:00','18:00','19:00','20:00','21:00','22:00','23:00']
	
	hours_range_day = []
	#loop through the hours
	for hr in range(0,24,1):
		if hr == 0:
			init = str(hr) + ':01'
			last = str(hr+1) + ':00'

		elif hr == 23:
			init = str(hr) + ':00'
			last = str(hr) + ':59'
		else:
			init = str(hr) + ':00'
			last = str(hr+1) + ':00'
			
		print(hr, init, last)
		
		hours_range_day.append([init, last])
	return hours_range_day
	#data_every_hour = weekday_data.between_time(init,last)
	#return data_every_hour, month, weekday, hr

		#print(df_name)
		#make hour data figures
    	#make_heatmap_hour(data_every_hour, month, weekday, hr)

def make_heatmap_hour(dataframe, month, weekday, hour):
	"""
	Create a heatmap for the given dataframe
	
	input: Dataframe with lat, long and speed
	month: Month the data belongs to
	hour: Hour the data is being plot
	"""
	#make sure speed is less than 70 mph
	print('making heatmap hr \n', hour)
	dataframe = dataframe.loc[dataframe['Speed'] <= 45]
	
	max_amount = float(dataframe['Speed'].max())

	hm = folium.Map(location=[40.1164, -88.243385], zoom_start=10, control_scale=True)


	hm.add_child(plugins.HeatMap( zip(dataframe.Latitude.values, dataframe.Longitude.values, dataframe.Speed.values), 
                   min_opacity=0.2,
                   max_val=max_amount,
                   radius=4, blur=5, 
                   max_zoom=1
                 ))

	linearColorMap = cm.LinearColormap(['blue','green', 'yellow', 'red'],vmin=0, vmax=max_amount)
	myname = 'R. Covarrubias'
	caption = 'Champaign Traffic Flow ' + str(month) + ' ' + str(hour)
	linearColorMap.caption = caption
	hm.add_child(linearColorMap)

	#if hour <= 1:
	print('Working on hour /n', hour)
	hour = hour.replace(':','')
	html_filename = month + '_' + weekday + '_' + hour + '.html'
	#html_filename = 'test.html'
	#html_filename = month + weekday + hour + '.html'
	print('Saving filename %s ' % html_filename)
	hm.save(html_filename)
	save_heatmap_png(html_filename)
	#else:
	#	exit()


def save_heatmap_png(html_filename):
	"""
	Uses html file generated by folium heatmap and saves
	it in png format using selenium
	
	html_filename: html filename used to generate png
	"""
	print('doing PNG')
	#filename is the html filename saved by heatmap
	fn = html_filename
	tmpurl = 'file://{path}/{mapfile}'.format(path=os.getcwd(), mapfile = fn)
	
	browser = webdriver.Chrome()
	browser.get(tmpurl)
	time.sleep(1)  #Give the map tiles some time to load
	
	
	png_name = fn.replace('html', 'png')
	print('Saving PNG image ', png_name)
	browser.save_screenshot(png_name)
	browser.quit()




filename = '/Users/ricardoc/RPC Champaign/HeatMaps/CHAMP_APR2017.csv'
flowApril = pd.read_csv(filename, names=['Date', 'Latitude', 'Longitude', 'Speed','TruckID'], low_memory=False, skiprows=1, nrows=100000)

#drop all rows that do not contain lat or longitude
cols_drop = ['Latitude', 'Longitude','TruckID']
clean_flowApril = flowApril.dropna(subset = cols_drop)

#Get the range of hours during the day to make plots (returns a list with a 2 element list)
#[init,last]
hours_range = range_hours_in_day()
#print(hours_range)

clean_flowApril['Date'] = pd.to_datetime(clean_flowApril['Date'])
clean_flowApril['DayWeek'] = clean_flowApril['Date'].dt.weekday_name
clean_flowApril = clean_flowApril.groupby(['DayWeek'])

weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
for day in weekdays:
    print('selecting {} Weekday'.format(day))
    weekday_data = clean_flowApril.get_group(day)
    weekday_data.index = weekday_data['Date']

    #For every day of the week, select data for every hour of the day
    for hours in hours_range:
    	init = hours[0]
    	last = hours[1]
    	data_every_hour = weekday_data.between_time(init,last)
    	make_heatmap_hour(data_every_hour, 'April', day, hours[1])
    	#if hours[1] == '2:00' and day == 'Monday':
    	#	exit()

#Make the call to the funcitons for the month of April
#data = group_day_of_week(clean_flowApril, 'April')
#data_every_hour, month, weekday, hr = group_day_of_week(clean_flowApril, 'April')
#Create a heat map for every hour
#make_heatmap_hour(data_every_hour, month, weekday, hr)
#make_heatmap_hour(data[0], data[1], data[2],data[3])



